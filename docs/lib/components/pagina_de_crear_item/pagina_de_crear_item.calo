asigno window.PaginaDeCrearItem como un componente vue2 con nombre "PaginaDeCrearItem" con plantilla {
  <div class="PaginaDeCrearItem Component">
    <xtitle>Página de crear ítem</xtitle>
    <xbreadcrumb>
      <xlink href="#/">Inicio</xlink>
      <span> » </span>
      <xlink :href="'#/ver/almacen/' + $route.params.id_almacen">Ver almacén</xlink>
      <span> » </span>
      <span>Crear ítem</span>
    </xbreadcrumb>
    <xpanel>
      <xform>
        <div class="xformfield">
          <div class="form_group">
            <div>Nombre del ítem:</div>
            <div ref="nombre">
              <input
                class="text_input"
                type="text"
                v-model="nombre_del_item" />
            </div>
          </div>
        </div>
        <div class="xformtext">
          <div class="form_group">
            <div>Descripción del ítem:</div>
            <div ref="descripcion">
              <textarea
                class="text_input"
                v-model="descripcion_del_item"></textarea>
            </div>
          </div>
        </div>
        <div class="xformfile">
          <div class="form_group">
            <div>Imagen del ítem:</div>
            <span class="cuadro_de_fichero">
              <button v-on:click="abrir_entrada_de_fichero">Seleccionar fichero</button>
              <span>{{ ruta_de_fichero ? ruta_de_fichero : 'No se ha seleccionado ningún fichero.' }}</span>
            </span>
            <div style="display: none;">
              <div ref="fichero">
                <input
                  class="text_input"
                  ref="imagen_del_item"
                  type="file"
                  accept="image/*"
                  v-on:change="al_cambiar_fichero" />
              </div>
            </div>
          </div>
        </div>
      </xform>
    </xpanel>
    <xlayoutnopaddingtop style="text-align: right;">
      <span v-on:click="crear_item">
        <xbutton>Crear ítem</xbutton>
      </span>
    </xlayoutnopaddingtop>
  </div>
} con lógica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    método data donde {
      debugo "PaginaDeCrearItem.data".
      retorno {
        nombre_del_item: undefined,
        descripcion_del_item: undefined,
        ruta_de_fichero: undefined,
        fichero_seleccionado: undefined,
        almacen: []
      }.
    }.
    propiedad methods como {
      método abrir_entrada_de_fichero donde {
        debugo "PaginaDeCrearItem.abrir_entrada_de_fichero".
        hago this.$refs.imagen_del_item.click().
      } en errores hago this.root.gestionar_error(error).
      método al_cambiar_fichero con (evento) donde {
        debugo "PaginaDeCrearItem.al_cambiar_fichero".
        creo fichero como evento.target.files[0].
        asigno this.ruta_de_fichero como fichero.name.
        asigno this.fichero_seleccionado como fichero.
      } en errores hago this.root.gestionar_error(error).
      método asíncrono crear_item donde {
        debugo "PaginaDeCrearItem.crear_item".
        creo nombre como this.$refs.nombre.querySelector("input").value.
        creo descripcion como this.$refs.descripcion.querySelector("textarea").value.
        creo variable imagen como undefined.
        creo fichero_imagen como this.fichero_seleccionado.
        si fichero_imagen no es tipo indefinido {
          asigno imagen como asíncronamente this.root.leer_fichero_como_url(fichero_imagen).
        }.
        si nombre.length es igual que 0 lanzo un nuevo Error("Se requiere parámetro «nombre» tener una cantidad mínima de texto").
        creo db como asíncronamente this.root.obtener_conexion().
        creo id_almacen como asíncronamente db.insert("item", {
          nombre,
          descripcion,
          imagen,
          id_almacen: this.$route.params.id_almacen,
          creado_en: una nueva Date(),
          actualizado_en: una nueva Date()
        }).
        hago this.$router.history.push("/ver/item/" + id_almacen).
      } en errores hago this.root.gestionar_error(error).
    }.
    propiedad watch como {}.
    propiedad computed como {}.
    método beforeCreate donde {}.
    método created donde {}.
    método beforeMount donde {}.
    método mounted donde {}.
    método beforeUpdate donde {}.
    método updated donde {}.
    método beforeUnmount donde {}.
    método unmounted donde {}.
    método activated donde {}.
    método deactivated donde {}.
  }.
}.