asigno window.PaginaDeVerItem como un componente vue2 con nombre "PaginaDeVerItem" con plantilla {
  <div class="PaginaDeVerItem Component">
    <xtitle>Página de ver ítem</xtitle>
    <xbreadcrumb v-if="item">
      <xlink href="#/">Inicio</xlink>
      <span> » </span>
      <xlink :href="'#/ver/almacen/' + item.id_almacen">Ver almacén</xlink>
      <span> » </span>
      <span>Ver ítem</span>
    </xbreadcrumb>
    <xbreadcrumb v-else="">
      <xlink href="#/">Inicio</xlink>
      <span> » </span>
      <span>Ver ítem</span>
    </xbreadcrumb>
    <xpanel v-if="item">
      <xlayoutnopaddingtop>
        <xlabel class="formitem">ID: {{ item.id }}</xlabel>
        <xlabel class="formitem">Nombre: {{ item.nombre }}</xlabel>
        <xlabel class="formitem">Descripción: {{ item.descripcion }}</xlabel>
        <xlabel class="formitem" v-if="item.imagen">
          <div>Imagen: {{ (item.imagen.length / 1000000).toFixed(2) }}MB</div>
          <img :src="item.imagen" />
        </xlabel>
      </xlayoutnopaddingtop>
      <xlayoutnopaddingtop style="text-align: right;">
        <span v-on:click="ir_a_editar_item">
          <xbutton>Ir a editar ítem</xbutton>
        </span>
        <span v-on:click="eliminar_item">
          <xbutton>Eliminar ítem</xbutton>
        </span>
      </xlayoutnopaddingtop>
    </xpanel>
  </div>
} con lógica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    método data donde {
      debugo "PaginaDeVerItem.data".
      retorno {
        item: undefined
      }.
    }.
    propiedad methods como {
      método asíncrono ir_a_editar_item donde {
        debugo "PaginaDeVerItem.ir_a_editar_item".
        hago this.$router.history.push("/editar/item/" + this.item.id).
      }.
      método asíncrono eliminar_item donde {
        debugo "PaginaDeVerItem.eliminar_item".
        creo confirmacion como this.root.$window.confirm("¿Estás seguro que quieres eliminar ítem " + this.item.id + "?").
        si no confirmacion retorno.
        creo db como asíncronamente this.root.obtener_conexion().
        creo item_id como parseInt(this.$route.params.id_item).
        creo item_eliminado como asíncronamente db.delete("item", item_id).
        hago this.$router.history.push("/ver/almacen/" + this.item.id_almacen).
      }.
      método asíncrono obtener_item donde {
        debugo "PaginaDeVerItem.obtener_item".
        creo db como asíncronamente this.root.obtener_conexion().
        creo item_id como parseInt(this.$route.params.id_item).
        creo itemes como asíncronamente db.select("item", una lambda con (item) donde {
          retorno item.id es igual que item_id.
        }).
        asigno this.item como itemes[0].
        hago this.$forceUpdate(true).
      }.
    }.
    propiedad watch como {}.
    propiedad computed como {}.
    método beforeCreate donde {}.
    método created donde {}.
    método beforeMount donde {}.
    método asíncrono mounted donde {
      debugo "PaginaDeVerItem.mounted".
      hago asíncronamente this.obtener_item().
    }.
    método beforeUpdate donde {}.
    método updated donde {}.
    método beforeUnmount donde {}.
    método unmounted donde {}.
    método activated donde {}.
    método deactivated donde {}.
  }.
}.